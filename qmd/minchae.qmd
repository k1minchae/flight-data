---
title: "뉴욕 비행장 데이터 분석"
subtitle: "권서연, 김민채, 박재원, 오상원"
author: "7조"
format: 
  revealjs:
    highlight-style: gruvbox
    incremental: true  
    code-line-numbers: true
    language: ko
    # logo: logo.png
    css: styles.css
    title-slide-attributes: 
      data-background-image: "assets/title-bg.gif"
      data-background-size: cover
    slide-attributes:
      data-background-image: "assets/bg.png"
      data-background-size: cover
jupyter: python3
---

--- 

## 목차 {data-background-image="assets/bg.png"}
<div style="padding-left: 3rem !important;">

::: {.incremental}
1. 데이터 설명  
2. 분석 목표  
3. 항공편 지연 분석  
   - 시간대별  
   - 계절별  
   - 날씨별  
4. 항공기 특성 분석  
   - 엔진 개수에 따른 특수성  
   - 생산 년도와 엔진 개수  

:::
</div>

---


## 데이터셋 정보 {data-background-image="assets/bg.png"}

```{python}

import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd
from nycflights13 import flights, planes, weather
```

![](https://docs.ropensci.org/dittodb/articles/relational-nycflights.svg)

<div style="margin-top: 1rem; padding-left: 1rem; padding-bottom: 1.6rem;">
  <li style="font-size: 1.6rem; margin-top: 5px; font-family: Pretendard !important;"> 데이터 구성: 2013년 뉴욕에서 출발한 모든 항공편의 운항 데이터 </li>
  <li style="font-size: 1.6rem; margin-top: 5px; font-family: Pretendard !important;"> 포함된 정보: 항공사, 공항, 날씨, 항공기 메타데이터 포함 </li>
  <li style="font-size: 1.6rem; margin-top: 5px; font-family: Pretendard !important;"> 분석 대상: `flights`, `planes`, `weather` 중심 </li>
</div>

---



## 데이터 병합 {data-background-image="assets/bg.png"}

- 다음과 같이 비행장 데이터 `flights`와 `planes`를 병합한 데이터를 생성합니다.

``` {.python code-line-numbers="|9"}
#| echo: true
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from nycflights13 import flights, planes

mer_dat = pd.merge(flights, planes, on='tailnum', how='left')
mer_dat.info()
```

------------------------------------------------------------------------

## 데이터 병합 {data-background-image="assets/bg.png"}

- 병합된 데이터인 `mer_dat`은 다음과 같은 변수들을 가지고 있습니다.

```{python}
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from nycflights13 import flights, planes

mer_dat = pd.merge(flights, planes, on='tailnum', how='left')
mer_dat.info()
```

------------------------------------------------------------------------


## 1. 시간대별 지연 분석 {data-background-image="assets/bg.png"}

``` {.python code-line-numbers="|1-3|5-13|14"}
# 전처리: 출발시간, 도착시간, 지연시간이 nan 일 경우 제거
flights = flights.dropna(
    subset=['dep_time', 'arr_time', 'arr_delay', 'dep_delay', 'air_time'])

# 시간대 나누는 함수
def divide_hour(hour):
    if 6 <= hour < 12:
        return 'morning'
    if 12 <= hour < 18:
        return 'lunch'
    if 18 <= hour < 24:
        return 'dinner'
    return 'dawn'
flights['time_of_day'] = flights['hour'].apply(divide_hour)

```

::::: columns


:::{.column width="50%"}
<div style="padding-bottom: 1rem;"> 
- 분류 기준: 새벽, 아침, 점심, 저녁
- <span style="color: #ef4444">목적: 각 시간대별 지연 패턴 분석</span>
</div>

:::

:::{.column width="50%"}

```{python}
flights = flights.dropna(
    subset=['dep_time', 'arr_time', 'arr_delay', 'dep_delay', 'air_time'])

# 시간대 나누는 함수
def divide_hour(hour):
    if 6 <= hour < 12:
        return 'morning'
    if 12 <= hour < 18:
        return 'lunch'
    if 18 <= hour < 24:
        return 'dinner'
    return 'dawn'
flights['time_of_day'] = flights['hour'].apply(divide_hour)
result = flights.loc[:, ['hour', 'time_of_day']].head(3)
print(result)
```


:::
:::::


## 1. 시간대별 지연 분석 {data-background-image="assets/bg.png"}
:::::columns
:::{.column width="55%"}
<h6 class="subtitle-style"> 시간대 별 항공편이 얼마나 있을까? </h6>
```{python}
#| eval: false
#| echo: true
time_flights = flights.groupby('time_of_day').size()
plt.bar(['dawn', 'morning', 'lunch', 'dinner'], 
        time_flights.values[[0, 3, 2, 1]])
plt.xlabel('time')
plt.ylabel('flights')
plt.title('flights by time')
```

<div style="margin-left:1rem;">
  <li style="margin-top: 3rem;">새벽에는 항공편 수가 거의 X</li>
  <li><span style="color: #ef4444;">아침과 점심에</span> 가장 많음</li>
  <li>저녁시간에는 항공편 수 감소</li>

</div>

:::

:::{.column width="45%"}
```{python}
#| eval: true
#| echo: false
# 시각화: 시간대 별로 항공편수가 몇개있는지
plt.figure(figsize=(6, 4))
time_flights = flights.groupby('time_of_day').size()
colors = ["#a1a1aa", "#FF9999", "#FF9999", "#a1a1aa"]
plt.bar(['dawn', 'morning', 'lunch', 'dinner'], 
        time_flights.values[[0, 3, 2, 1]], color=colors)
plt.xlabel('time')
plt.ylabel('flights')
plt.title('flights by time')
plt.show()
```

::: {.fragment}
<p style="color: #ef4444; font-style: italic; font-size: 34px; margin-top: 0.6rem; font-family: Cafe24Ssurround">"아침, 점심에 지연이 많겠지?"</p>

:::
:::
:::::




## 1. 시간대별 지연 분석 {data-background-image="assets/bg.png"}

<h6 class="subtitle-style"> 15분 이상 출발 지연된 비행편 살펴보기 </h6>

:::::columns
:::{.column width="55%"}
``` {.python code-line-numbers="|1-5|6-11|"}
# 15분 이상 지연된 비행기들
delayed = flights.loc[flights['dep_delay'] >= 15, :]

# 지연된 비행기 시간대별로 분류
delay_cnt = delayed.groupby('time_of_day').size()
plt.bar(['dawn', 'morning', 'lunch', 'dinner'],
       delay_cnt.values[[0, 3, 2, 1]])
plt.xlabel('time')
plt.ylabel('delayed flights')
plt.title('delay by time')
plt.show()
```
:::
:::{.column width="45%"}
```{python}
#| eval: true
#| echo: false
colors = ["#a1a1aa", "#FF9999", "#a1a1aa", "#FF9999"]
# 15분 이상 지연된 비행기들
delayed = flights.loc[flights['dep_delay'] >= 15, :]

# 지연된 비행기 시간대별로 분류
delay_cnt = delayed.groupby('time_of_day').size()
plt.figure(figsize=(5, 3))
plt.bar(['dawn', 'morning', 'lunch', 'dinner'],
       delay_cnt.values[[0, 3, 2, 1]],
       color=colors)
plt.xlabel('time')
plt.ylabel('delayed flights')
plt.title('delay by time')
plt.show()
```
- 항공편이 많은건 아침인데?
- <span class="red-color">저녁이 더 많이 지연되고 있음!</span>
:::
:::::





## 1. 시간대별 지연 분석 {data-background-image="assets/bg.png"}

<img src="assets/news.png" style="width:75%;">

:::{.fragment}
<img src="assets/question.png" style="position: absolute; bottom: 0; width: 30%; right: -40px;">

<span class="red-color"
      style="font-family: Cafe24Ssurround; font-size: 32px;">그래서 연쇄 지연으로 저녁에 지연이 더 심한건가?</span>

:::




## 1-2. 연쇄 지연 분석 {data-background-image="assets/bg.png"}

<h6 class="subtitle-style"> 데이터 전처리 과정 </h6>

```{python}
# 출발 시간 기준으로 정렬
sort_ = flights.sort_values(['year','month', 'day', 'hour', 'minute'], ascending=True)

# 같은 날 이전 항공편의 도착 지연 정보 추가
sort_['prev_arr_delay'] = sort_.groupby(['year', 'month', 'day', 'flight'])['arr_delay'].shift(1)

# 해당 날에 첫 항공편이거나, 유일한 항공편 제거
sort_ = sort_.dropna(subset='prev_arr_delay')

# comprehension 사용으로 연쇄 지연 count
days = ['dawn', 'morning', 'lunch', 'dinner']
delay_counts = {time: len(sort_.loc[(sort_['time_of_day'] == time) & 
                                  (sort_['dep_delay'] >= 15) & 
                                  (sort_['prev_arr_delay'] >= 15), :]) 
                for time in days}
```

``` {.python code-line-numbers="|1-2|4-5|7-8|10-15|"}
# 출발 시간 기준으로 정렬
sort_ = flights.sort_values(['year','month', 'day', 'hour', 'minute'], ascending=True)

# 같은 날 이전 항공편의 도착 지연 정보 추가
sort_['prev_arr_delay'] = sort_.groupby(['year', 'month', 'day', 'flight'])['arr_delay'].shift(1)

# 해당 날에 첫 항공편이거나, 유일한 항공편 제거
sort_ = sort_.dropna(subset='prev_arr_delay')

# comprehension 사용으로 연쇄 지연 count
days = ['dawn', 'morning', 'lunch', 'dinner']
delay_counts = {time: len(sort_.loc[(sort_['time_of_day'] == time) & 
                                  (sort_['dep_delay'] >= 15) & 
                                  (sort_['prev_arr_delay'] >= 15), :]) 
                for time in days}
```


---

## 1-2. 연쇄 지연 분석 {data-background-image="assets/bg.png"}

<h6 class="subtitle-style"> 데이터 시각화 </h6>
:::::columns
:::{.column width="60%"}
``` {.python code-line-numbers="|6|"}
# 파이 차트 그리기
plt.figure(figsize=(7, 7))
colors = ["#c4b5fd", "#bef264", "#fdba74", "#155e75"]
plt.pie(delay_counts.values(), 
        labels=days, 
        autopct=lambda p: f'{p:.1f}%' if p > 0 else '',
        startangle=90, 
        colors=colors, 
        wedgeprops={"edgecolor": "#52525b"})
plt.title("cascade delay")
plt.legend(days, title="Time Periods", loc="upper right")
plt.show()
```
:::
:::{.column width="40%"}
```{python}
#| echo: false
#| eval: true
# 파이 차트 그리기
plt.figure(figsize=(4.5, 4.5))
colors = ["#c4b5fd", "#bef264", "#fdba74", "#155e75"]
plt.pie(delay_counts.values(), 
        labels=days, 
        autopct=lambda p: f'{p:.1f}%' if p > 0 else '',
        startangle=90, 
        colors=colors, 
        wedgeprops={"edgecolor": "#52525b"})
plt.title("cascade delay")
plt.legend(days, title="Time Periods", loc="upper right")
plt.show()
```
:::
:::::